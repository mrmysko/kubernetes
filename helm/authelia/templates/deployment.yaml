apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}"
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  revisionHistoryLimit: 3
  replicas: {{ .Values.app.replicaCount | default 1 }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.app.name | default .Chart.Name }}
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/component: frontend
    spec:
      initContainers:
        - name: wait-for-mariadb
          image: mariadb:11
          command: 
            - sh
            - -c
            - >
              until mariadb-admin ping -h "${DB_HOST}" -u"${DB_USER}" -p"${DB_PASSWORD}" -s;
              do echo "Waiting for MariaDB..."; sleep 3;
              done
          env:
            - name: DB_HOST
              value: "{{ .Values.database.host }}"
            - name: DB_USER
              value: "{{ .Values.database.username }}"
            - name: DB_PASSWORD
              value: "{{ .Values.database.password }}"
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.app.image.pullPolicy | default "IfNotPresent" }}
          command:
            - authelia
          args:
            - "--config=/config/configuration.yml"
            - "--config=/config/configuration.clients.yml"
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.service.port }}
          securityContext:
            runAsUser: {{ .Values.app.uid }}
            runAsGroup: {{ .Values.app.gid }}
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-env
            - secretRef:
                name: {{ .Release.Name }}-secret
          resources:
          {{- toYaml ( .Values.app.resources | default dict ) | nindent 12 }}
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /api/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /api/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: {{ .Release.Name }}-config
              mountPath: /config
            - name: {{ .Release.Name }}-cert
              mountPath: /tmp/certs
              readOnly: true
            - name: {{ .Release.Name }}-secret
              mountPath: {{ .Values.config.secretsDir }}
              readOnly: true
      volumes:
        - name: {{ .Release.Name }}-config
          configMap:
            name: {{ .Release.Name }}-config
        - name: {{ .Release.Name }}-cert
          secret:
            secretName: {{ .Release.Name }}-server-cert
        - name: {{ .Release.Name }}-secret
          secret:
            secretName: {{ .Release.Name }}-secret
      enableServiceLinks: false