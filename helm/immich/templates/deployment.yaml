kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{ .Release.Name }}-server"
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  revisionHistoryLimit: 3
  replicas: {{ .Values.app.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/component: frontend
    spec:
      initContainers:
        - name: wait-for-samba
          image: alpine:3.20
          command:
            - /bin/sh
            - -c
            - |
              apk add --no-cache samba-client > /dev/null
              echo "Waiting for SMB share "//${SMB_URL}/${SMB_SHARE}"..."
              until smbclient -L "//${SMB_URL}" -U "${SMB_USER}%${SMB_PASS}" -m SMB3 >/dev/null 2>&1; do
                echo "Samba share not ready yet, retrying..."
                sleep 5
              done
              echo "Samba share is available."
          env:
            - name: SMB_URL
              value: "{{ .Values.storage.smb.url }}"
            - name: SMB_SHARE
              value: "{{ .Values.storage.smb.share }}"
            - name: SMB_USER
              value: "{{ .Values.storage.smb.username }}"
            - name: SMB_PASS
              value: "{{ .Values.storage.smb.password }}"
      containers:
        - name: "{{ .Release.Name }}-server"
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-env
                optional: false
            - secretRef:
                name: {{ .Release.Name }}-secret
                optional: false
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: {{ .Values.app.uid }}
            runAsGroup: {{ .Values.app.gid }}
            capabilities:
              drop: ["ALL"]
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          resources:
          {{- toYaml ( .Values.app.resources | default dict ) | nindent 12 }}
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /api/server/ping
              port: {{ .Values.service.port }}
            initialDelaySeconds: 20
            periodSeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /api/server/ping
              port: {{ .Values.service.port }}
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
            - name: library
              mountPath: /data
      volumes:
        - name: library
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-upload-pvc
