apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}"
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  revisionHistoryLimit: 3
  replicas: {{ .Values.app.replicaCount | default 1 }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/component: frontend
    spec:
      initContainers:
        - name: init-chown
          image: busybox:1.36
          command: ["sh", "-c", "chown -R {{ .Values.app.uid }}:{{ .Values.app.gid }} /data"]
          securityContext:
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config-pvc
              mountPath: /data
        - name: wait-for-samba
          image: alpine:3.20
          command:
            - /bin/sh
            - -c
            - |
              apk add --no-cache samba-client > /dev/null
              echo "Waiting for SMB share "//${SMB_URL}/${SMB_SHARE}"..."
              until smbclient -L "//${SMB_URL}" -U "${SMB_USER}%${SMB_PASS}" -m SMB3 >/dev/null 2>&1; do
                echo "Samba share not ready yet, retrying..."
                sleep 5
              done
              echo "Samba share is available."
          env:
            - name: SMB_URL
              value: "{{ .Values.storage.smb.url }}"
            - name: SMB_SHARE
              value: "{{ .Values.storage.smb.share }}"
            - name: SMB_USER
              value: "{{ .Values.storage.smb.username }}"
            - name: SMB_PASS
              value: "{{ .Values.storage.smb.password }}"
      containers:
        - name: "{{ .Release.Name }}"
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          imagePullPolicy: {{ .Values.app.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - containerPort: {{ .Values.service.port }}
          envFrom:
            - secretRef:
                name: "{{ .Release.Name }}-secret"
          env:
            - name: ND_CONFIGFILE
              value: /data/navidrome.toml
          resources:
          {{- toYaml ( .Values.app.resources | default dict ) | nindent 12 }}
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /ping
              port: {{ .Values.service.port }}
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /ping
              port: {{ .Values.service.port }}
            initialDelaySeconds: 10
            periodSeconds: 10
          securityContext:
            runAsUser: {{ .Values.app.uid }}
            runAsGroup: {{ .Values.app.gid }}
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config-pvc
              mountPath: /data
            - name: configmap
              mountPath: /data/navidrome.toml
              subPath: navidrome.toml
              readOnly: true
            - name: "{{ .Release.Name }}-cache"
              mountPath: /data/cache
            - name: "{{ .Release.Name }}-music"
              mountPath: /music
              readOnly: true
      volumes:
        - name: config-pvc
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-config-pvc"
        - name: configmap
          configMap:
            name: "{{ .Release.Name }}-configmap"
            items:
              - key: navidrome.toml
                path: navidrome.toml
        - name: "{{ .Release.Name }}-music"
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-music"
        - name: "{{ .Release.Name }}-cache"
          emptyDir:
            medium: Memory
