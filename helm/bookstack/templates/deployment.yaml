apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: {{ .Values.app.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.appName | default .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/component: frontend
    spec:
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.app.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - containerPort: {{ .Values.service.port }}
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
          resources:
          {{- toYaml ( .Values.app.resources | default dict ) | nindent 12 }}
          {{- if .Values.app.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              scheme: {{ .Values.app.healthCheck.scheme }}
              path: {{ .Values.app.healthCheck.path }}
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.app.healthCheck.initialDelay }}
            periodSeconds: {{ .Values.app.healthCheck.periodSeconds }}
          readinessProbe:
            httpGet:
              scheme: {{ .Values.app.healthCheck.scheme }}
              path: {{ .Values.app.healthCheck.path }}
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.app.healthCheck.initialDelay }}
            periodSeconds: {{ .Values.app.healthCheck.periodSeconds }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-config
            - secretRef:
                name: {{ .Release.Name }}-secret
          volumeMounts:
            - name: {{ .Release.Name }}-storage
              mountPath: /var/www/bookstack/storage/uploads
              subPath: uploads
            {{- if (.Values.database.enabled) }}
            - name: invis-external-bundle
              mountPath: /tmp/ca.crt
              subPath: ca.crt
            {{- end }}
      volumes:
        {{- if (.Values.database.enabled) }}
        - name: invis-external-bundle
          secret:
            secretName: invis-external-bundle
            items:
              - key: ca.crt
                path: ca.crt
        {{- end }}
        - name: {{ .Release.Name }}-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-pvc
